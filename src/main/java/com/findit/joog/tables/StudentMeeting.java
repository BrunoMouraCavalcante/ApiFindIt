/*
 * This file is generated by jOOQ.
*/
package com.findit.joog.tables;


import com.findit.joog.Indexes;
import com.findit.joog.Keys;
import com.findit.joog.Public;
import com.findit.joog.tables.records.StudentMeetingRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentMeeting extends TableImpl<StudentMeetingRecord> {

    private static final long serialVersionUID = -2731375;

    /**
     * The reference instance of <code>public.Student_Meeting</code>
     */
    public static final StudentMeeting STUDENT_MEETING = new StudentMeeting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentMeetingRecord> getRecordType() {
        return StudentMeetingRecord.class;
    }

    /**
     * The column <code>public.Student_Meeting.id</code>.
     */
    public final TableField<StudentMeetingRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Student_Meeting_id_seq\"'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Student_Meeting.student_id</code>.
     */
    public final TableField<StudentMeetingRecord, Integer> STUDENT_ID = createField("student_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Student_Meeting.meeting_id</code>.
     */
    public final TableField<StudentMeetingRecord, Integer> MEETING_ID = createField("meeting_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Student_Meeting.status</code>.
     */
    public final TableField<StudentMeetingRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.Student_Meeting</code> table reference
     */
    public StudentMeeting() {
        this(DSL.name("Student_Meeting"), null);
    }

    /**
     * Create an aliased <code>public.Student_Meeting</code> table reference
     */
    public StudentMeeting(String alias) {
        this(DSL.name(alias), STUDENT_MEETING);
    }

    /**
     * Create an aliased <code>public.Student_Meeting</code> table reference
     */
    public StudentMeeting(Name alias) {
        this(alias, STUDENT_MEETING);
    }

    private StudentMeeting(Name alias, Table<StudentMeetingRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentMeeting(Name alias, Table<StudentMeetingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STUDENT_MEETING_PKEY, Indexes.FKI_FK_MEETING, Indexes.FKI_FK_STUDENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StudentMeetingRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STUDENT_MEETING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StudentMeetingRecord> getPrimaryKey() {
        return Keys.STUDENT_MEETING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StudentMeetingRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentMeetingRecord>>asList(Keys.STUDENT_MEETING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StudentMeetingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StudentMeetingRecord, ?>>asList(Keys.STUDENT_MEETING__FK_STUDENT, Keys.STUDENT_MEETING__FK_MEETING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StudentMeeting as(String alias) {
        return new StudentMeeting(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StudentMeeting as(Name alias) {
        return new StudentMeeting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentMeeting rename(String name) {
        return new StudentMeeting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentMeeting rename(Name name) {
        return new StudentMeeting(name, null);
    }
}
