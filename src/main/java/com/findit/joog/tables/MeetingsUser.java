/*
 * This file is generated by jOOQ.
*/
package com.findit.joog.tables;


import com.findit.joog.Indexes;
import com.findit.joog.Keys;
import com.findit.joog.Public;
import com.findit.joog.tables.records.MeetingsUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeetingsUser extends TableImpl<MeetingsUserRecord> {

    private static final long serialVersionUID = -891751060;

    /**
     * The reference instance of <code>public.Meetings_User</code>
     */
    public static final MeetingsUser MEETINGS_USER = new MeetingsUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeetingsUserRecord> getRecordType() {
        return MeetingsUserRecord.class;
    }

    /**
     * The column <code>public.Meetings_User.id</code>.
     */
    public final TableField<MeetingsUserRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Meetings_User.meeting_id</code>.
     */
    public final TableField<MeetingsUserRecord, Integer> MEETING_ID = createField("meeting_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Meetings_User.user_id</code>.
     */
    public final TableField<MeetingsUserRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Meetings_User.status</code>.
     */
    public final TableField<MeetingsUserRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.Meetings_User</code> table reference
     */
    public MeetingsUser() {
        this(DSL.name("Meetings_User"), null);
    }

    /**
     * Create an aliased <code>public.Meetings_User</code> table reference
     */
    public MeetingsUser(String alias) {
        this(DSL.name(alias), MEETINGS_USER);
    }

    /**
     * Create an aliased <code>public.Meetings_User</code> table reference
     */
    public MeetingsUser(Name alias) {
        this(alias, MEETINGS_USER);
    }

    private MeetingsUser(Name alias, Table<MeetingsUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private MeetingsUser(Name alias, Table<MeetingsUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEETINGS_USER_PKEY, Indexes.FKI_MEETINGS_ID_FK, Indexes.FKI_USER_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MeetingsUserRecord> getPrimaryKey() {
        return Keys.MEETINGS_USER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MeetingsUserRecord>> getKeys() {
        return Arrays.<UniqueKey<MeetingsUserRecord>>asList(Keys.MEETINGS_USER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MeetingsUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MeetingsUserRecord, ?>>asList(Keys.MEETINGS_USER__MEETINGS_ID_FK, Keys.MEETINGS_USER__USER_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeetingsUser as(String alias) {
        return new MeetingsUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeetingsUser as(Name alias) {
        return new MeetingsUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MeetingsUser rename(String name) {
        return new MeetingsUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MeetingsUser rename(Name name) {
        return new MeetingsUser(name, null);
    }
}
