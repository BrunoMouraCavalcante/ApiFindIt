/*
 * This file is generated by jOOQ.
*/
package com.findit.joog.tables;


import com.findit.joog.Indexes;
import com.findit.joog.Keys;
import com.findit.joog.Public;
import com.findit.joog.tables.records.MeetingsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Meetings extends TableImpl<MeetingsRecord> {

    private static final long serialVersionUID = -1270821315;

    /**
     * The reference instance of <code>public.Meetings</code>
     */
    public static final Meetings MEETINGS = new Meetings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeetingsRecord> getRecordType() {
        return MeetingsRecord.class;
    }

    /**
     * The column <code>public.Meetings.meeting_id</code>.
     */
    public final TableField<MeetingsRecord, Integer> MEETING_ID = createField("meeting_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Meetings_meeting_id_seq\"'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Meetings.type</code>.
     */
    public final TableField<MeetingsRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Meetings.date</code>.
     */
    public final TableField<MeetingsRecord, Timestamp> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.Meetings</code> table reference
     */
    public Meetings() {
        this(DSL.name("Meetings"), null);
    }

    /**
     * Create an aliased <code>public.Meetings</code> table reference
     */
    public Meetings(String alias) {
        this(DSL.name(alias), MEETINGS);
    }

    /**
     * Create an aliased <code>public.Meetings</code> table reference
     */
    public Meetings(Name alias) {
        this(alias, MEETINGS);
    }

    private Meetings(Name alias, Table<MeetingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Meetings(Name alias, Table<MeetingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEETINGS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MeetingsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEETINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MeetingsRecord> getPrimaryKey() {
        return Keys.MEETINGS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MeetingsRecord>> getKeys() {
        return Arrays.<UniqueKey<MeetingsRecord>>asList(Keys.MEETINGS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Meetings as(String alias) {
        return new Meetings(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Meetings as(Name alias) {
        return new Meetings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Meetings rename(String name) {
        return new Meetings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Meetings rename(Name name) {
        return new Meetings(name, null);
    }
}
