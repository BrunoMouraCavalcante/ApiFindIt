/*
 * This file is generated by jOOQ.
*/
package com.findit.joog.tables.records;


import com.findit.joog.tables.Meetings;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeetingsRecord extends UpdatableRecordImpl<MeetingsRecord> implements Record3<Integer, Integer, Timestamp> {

    private static final long serialVersionUID = -537862931;

    /**
     * Setter for <code>public.Meetings.meeting_id</code>.
     */
    public void setMeetingId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.Meetings.meeting_id</code>.
     */
    public Integer getMeetingId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.Meetings.type</code>.
     */
    public void setType(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.Meetings.type</code>.
     */
    public Integer getType() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.Meetings.date</code>.
     */
    public void setDate(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.Meetings.date</code>.
     */
    public Timestamp getDate() {
        return (Timestamp) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, Integer, Timestamp> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, Integer, Timestamp> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Meetings.MEETINGS.MEETING_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Meetings.MEETINGS.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field3() {
        return Meetings.MEETINGS.DATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getMeetingId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component3() {
        return getDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getMeetingId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value3() {
        return getDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeetingsRecord value1(Integer value) {
        setMeetingId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeetingsRecord value2(Integer value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeetingsRecord value3(Timestamp value) {
        setDate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeetingsRecord values(Integer value1, Integer value2, Timestamp value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeetingsRecord
     */
    public MeetingsRecord() {
        super(Meetings.MEETINGS);
    }

    /**
     * Create a detached, initialised MeetingsRecord
     */
    public MeetingsRecord(Integer meetingId, Integer type, Timestamp date) {
        super(Meetings.MEETINGS);

        set(0, meetingId);
        set(1, type);
        set(2, date);
    }
}
